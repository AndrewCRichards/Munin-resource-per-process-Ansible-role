#!/bin/bash

# {{ansible_managed}}

# Plugin for Munin to pull out %{{item.name}} usage for specified processes from 'ps' output.
# Note that this only works as an estimate, figures from ps don't tell the whole story.

# Package, license details:

# This Munin plugin is generated by an Ansible role munin_resource_per_process
# Copyright (C) 2018  Andrew Richards, www.acrconsulting.co.uk

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# More info: http://free.acrconsulting.co.uk/other/munin-plugins.html#rpp

: <<=cut

=head1 NAME

{{item.name}}{{munin_resource_pp_suffix}}

=head1 DESCRIPTION

Munin plugin to graph specified processes' %{{item.name}} usage; uses the output of the
'ps' command. Note that 'ps' output should not be considered fully accurate, so this
plugin should be used to get an idea of trends of {{item.name}} use; actual {{item.name}} use will
be a bit different; please read Internet posts on this subject to understand why.
As well as the fundamental limitations of 'ps', intermittently-running processes
that aren't running at the exact same time as 'ps' won't show up: The plugin is
only really well-suited to daemon-type programs that run continuously. Similarly
programs that have have intense brief spikes of {{item.name}} use won't be accurately
graphed for the same reason.

More info: http://free.acrconsulting.co.uk/other/munin-plugins.html#rpp

=head1 CONFIGURATION

This plugin is configured by adjusting the Ansible configuration that generates
the plugin, so (at least currently) the settings for the script (basically the
list of processes to be graphed) are set in the Ansible inventory. There are two
special process names: 'kernel' sums the processes that show up as [process_name]
in the ps listing; this is primarily kernel threads and system processes. 'other'
is all 'ps' entries that aren't explicitly listed. Note that processes where an
absolute path is included have the path stripped.

It is also possible to specify mappings to rename processes in the graph output,
or to have a set of mappings rename entries to a single aggregated value.

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf

=head1 VERSION

  $Id$

=head1 AUTHOR

Andrew Richards acrconsulting.co.uk, June 2018

=head1 LICENSE

GPLv2

=cut

function show_config {
    echo 'graph_title Per-process {{item.name}} usage'
    echo "graph_args --base 1000 -r --lower-limit 0 --upper-limit 100"
    echo 'graph_vlabel %{{item.name}}'
    echo 'graph_scale no'
    echo 'graph_info This graph shows the %{{item.name}} used by specified processes.'
    echo 'graph_category processes'

{% for service in munin_resource_pp_services -%}
{# Couldn't get spacing to work cleanly without using jinja2 braces; also in awk script below #}
{{"    "}}echo "{{service}}.label {{service}}"
{{"    "}}echo "{{service}}.draw AREASTACK"
{{"    "}}echo "{{service}}.min 0"

{% endfor -%}
}

function show_stats() {

# notes on the awk code:
#   $11~"^\\["        - to match ps [process_name] entries (typically kernel/system)
#   $11~"^/" {sub...  - strip path components of process name

    ps --no-headers auxw | \
      awk '   BEGIN           {
{% for service in munin_resource_pp_services -%}
{{"                               "}}services_list["{{service}}"]=1; {{item.name}}_usage["{{service}}"]=0;
{% endfor -%}
{{"                             "}} };
              $11~"^\\["      {$11="kernel"};
              $11~"^/"        {sub("^.*/","",$11)};
{% for mapping in munin_resource_pp_mappings -%}
{{"              "}}$11~"{{mapping.pattern}}"  {$11="{{mapping.newname}}"};
{% endfor -%}
{{"                              "}}{if (!($11 in services_list)) $11="other"};
                              { {{item.name}}_usage[$11]+={{item.field}} };
              END             {for (service in services_list)
                                 if (service in {{item.name}}_usage) print service ".value", {{item.name}}_usage[service]{% if item.scale_factor != 1 %} / {{item.scale_factor}}{% endif %};
                              }' 
}

if [ "$1" = "autoconf" ]; then
    echo yes
    exit 0
fi

if [ "$1" = "config" ]; then
    show_config
    exit 0
fi

show_stats

